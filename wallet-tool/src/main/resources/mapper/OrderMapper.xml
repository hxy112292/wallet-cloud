<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.blockchain.wallet.mapper.OrderMapper">
  <resultMap id="BaseResultMap" type="org.blockchain.wallet.entity.Order">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="product_list" jdbcType="VARCHAR" property="productList" typeHandler="org.blockchain.wallet.typehandler.ListTypeHandler" />
    <result column="total_fee" jdbcType="INTEGER" property="totalFee" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="pay_no" jdbcType="VARCHAR" property="payNo" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="payment_time" jdbcType="TIMESTAMP" property="paymentTime" />
    <result column="from_addr" jdbcType="VARCHAR" property="fromAddr" />
    <result column="to_addr" jdbcType="VARCHAR" property="toAddr" />
  </resultMap>
  <sql id="Base_Column_List">
    id, user_id, product_list, total_fee, status, pay_no, create_time, update_time, payment_time,
    from_addr, to_addr
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from wallet_order
    where id = #{id,jdbcType=VARCHAR}
  </select>
  <select id="selectBySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from wallet_order
    where 1 = 1
    <if test="userId != null and userId!=''">
      and user_id = #{userId, jdbcType=VARCHAR}
    </if>
    <if test="status != null and status!='' or status == 0">
      and status = #{status, jdbcType=INTEGER}
    </if>
    <if test="startCreateTime != null and endCreateTime != null">
      and <![CDATA[create_time >= #{startCreateTime, jdbcType=TIMESTAMP} and create_time <= #{endCreateTime, jdbcType=TIMESTAMP}]]>
    </if>
    <if test="startPaymentTime != null and endPaymentTime != null">
      and <![CDATA[payment_time >= #{startPaymentTime, jdbcType=TIMESTAMP} and payment_time <= #{endPaymentTime, jdbcType=TIMESTAMP}]]>
    </if>
    order by create_time desc
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from wallet_order
    where id = #{id,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="org.blockchain.wallet.entity.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into wallet_order (id, user_id, product_list,
      total_fee, status, pay_no,
      create_time, update_time, payment_time,
      from_addr, to_addr)
    values (#{id, jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, #{productList,jdbcType=VARCHAR,typeHandler=org.blockchain.wallet.typehandler.ListTypeHandler},
      #{totalFee,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{payNo,jdbcType=VARCHAR},
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{paymentTime,jdbcType=TIMESTAMP},
      #{fromAddr,jdbcType=VARCHAR}, #{toAddr,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="org.blockchain.wallet.entity.Order">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.String">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into wallet_order
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="productList != null">
        product_list,
      </if>
      <if test="totalFee != null">
        total_fee,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="payNo != null">
        pay_no,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="paymentTime != null">
        payment_time,
      </if>
      <if test="fromAddr != null">
        from_addr,
      </if>
      <if test="toAddr != null">
        to_addr,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="productList != null">
        #{productList,jdbcType=VARCHAR,typeHandler=org.blockchain.wallet.typehandler.ListTypeHandler},
      </if>
      <if test="totalFee != null">
        #{totalFee,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="payNo != null">
        #{payNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentTime != null">
        #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fromAddr != null">
        #{fromAddr,jdbcType=VARCHAR},
      </if>
      <if test="toAddr != null">
        #{toAddr,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.blockchain.wallet.entity.Order">
    update wallet_order
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="productList != null">
        product_list = #{productList,jdbcType=VARCHAR,typeHandler=org.blockchain.wallet.typehandler.ListTypeHandler},
      </if>
      <if test="totalFee != null">
        total_fee = #{totalFee,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="payNo != null">
        pay_no = #{payNo,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="paymentTime != null">
        payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      </if>
      <if test="fromAddr != null">
        from_addr = #{fromAddr,jdbcType=VARCHAR},
      </if>
      <if test="toAddr != null">
        to_addr = #{toAddr,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.blockchain.wallet.entity.Order">
    update wallet_order
    set user_id = #{userId,jdbcType=INTEGER},
      product_list = #{productList,jdbcType=VARCHAR,typeHandler=org.blockchain.wallet.typehandler.ListTypeHandler},
      total_fee = #{totalFee,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      pay_no = #{payNo,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      payment_time = #{paymentTime,jdbcType=TIMESTAMP},
      from_addr = #{fromAddr,jdbcType=VARCHAR},
      to_addr = #{toAddr,jdbcType=VARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>
