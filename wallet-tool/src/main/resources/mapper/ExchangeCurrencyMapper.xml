<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.blockchain.wallet.mapper.ExchangeCurrencyMapper">
  <resultMap id="BaseResultMap" type="org.blockchain.wallet.entity.ExchangeCurrency">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="exchange_usd_total" jdbcType="DECIMAL" property="exchangeUsdTotal" />
    <result column="exchange_btc" jdbcType="DECIMAL" property="exchangeBtc" />
    <result column="exchange_eth" jdbcType="DECIMAL" property="exchangeEth" />
    <result column="exchange_usdt" jdbcType="DECIMAL" property="exchangeUsdt" />
    <result column="market_usd_total" jdbcType="DECIMAL" property="marketUsdTotal" />
    <result column="market_btc" jdbcType="DECIMAL" property="marketBtc" />
    <result column="market_eth" jdbcType="DECIMAL" property="marketEth" />
    <result column="market_usdt" jdbcType="DECIMAL" property="marketUsdt" />
    <result column="percentage" jdbcType="DOUBLE" property="percentage" />
    <result column="btc_price" jdbcType="DECIMAL" property="btcPrice" />
    <result column="eth_price" jdbcType="DECIMAL" property="ethPrice" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, exchange_usd_total, exchange_btc, exchange_eth, exchange_usdt, market_usd_total, 
    market_btc, market_eth, market_usdt, percentage, btc_price, eth_price, create_time, 
    update_time
  </sql>
  <select id="selectBySelective" parameterType="map" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from exchange_currency
    order by create_time desc
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from exchange_currency
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from exchange_currency
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="org.blockchain.wallet.entity.ExchangeCurrency">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into exchange_currency (exchange_usd_total, exchange_btc, exchange_eth, 
      exchange_usdt, market_usd_total, market_btc, 
      market_eth, market_usdt, percentage, 
      btc_price, eth_price, create_time, 
      update_time)
    values (#{exchangeUsdTotal,jdbcType=DECIMAL}, #{exchangeBtc,jdbcType=DECIMAL}, #{exchangeEth,jdbcType=DECIMAL}, 
      #{exchangeUsdt,jdbcType=DECIMAL}, #{marketUsdTotal,jdbcType=DECIMAL}, #{marketBtc,jdbcType=DECIMAL}, 
      #{marketEth,jdbcType=DECIMAL}, #{marketUsdt,jdbcType=DECIMAL}, #{percentage,jdbcType=DOUBLE}, 
      #{btcPrice,jdbcType=DECIMAL}, #{ethPrice,jdbcType=DECIMAL}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="org.blockchain.wallet.entity.ExchangeCurrency">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into exchange_currency
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="exchangeUsdTotal != null">
        exchange_usd_total,
      </if>
      <if test="exchangeBtc != null">
        exchange_btc,
      </if>
      <if test="exchangeEth != null">
        exchange_eth,
      </if>
      <if test="exchangeUsdt != null">
        exchange_usdt,
      </if>
      <if test="marketUsdTotal != null">
        market_usd_total,
      </if>
      <if test="marketBtc != null">
        market_btc,
      </if>
      <if test="marketEth != null">
        market_eth,
      </if>
      <if test="marketUsdt != null">
        market_usdt,
      </if>
      <if test="percentage != null">
        percentage,
      </if>
      <if test="btcPrice != null">
        btc_price,
      </if>
      <if test="ethPrice != null">
        eth_price,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="exchangeUsdTotal != null">
        #{exchangeUsdTotal,jdbcType=DECIMAL},
      </if>
      <if test="exchangeBtc != null">
        #{exchangeBtc,jdbcType=DECIMAL},
      </if>
      <if test="exchangeEth != null">
        #{exchangeEth,jdbcType=DECIMAL},
      </if>
      <if test="exchangeUsdt != null">
        #{exchangeUsdt,jdbcType=DECIMAL},
      </if>
      <if test="marketUsdTotal != null">
        #{marketUsdTotal,jdbcType=DECIMAL},
      </if>
      <if test="marketBtc != null">
        #{marketBtc,jdbcType=DECIMAL},
      </if>
      <if test="marketEth != null">
        #{marketEth,jdbcType=DECIMAL},
      </if>
      <if test="marketUsdt != null">
        #{marketUsdt,jdbcType=DECIMAL},
      </if>
      <if test="percentage != null">
        #{percentage,jdbcType=DOUBLE},
      </if>
      <if test="btcPrice != null">
        #{btcPrice,jdbcType=DECIMAL},
      </if>
      <if test="ethPrice != null">
        #{ethPrice,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.blockchain.wallet.entity.ExchangeCurrency">
    update exchange_currency
    <set>
      <if test="exchangeUsdTotal != null">
        exchange_usd_total = #{exchangeUsdTotal,jdbcType=DECIMAL},
      </if>
      <if test="exchangeBtc != null">
        exchange_btc = #{exchangeBtc,jdbcType=DECIMAL},
      </if>
      <if test="exchangeEth != null">
        exchange_eth = #{exchangeEth,jdbcType=DECIMAL},
      </if>
      <if test="exchangeUsdt != null">
        exchange_usdt = #{exchangeUsdt,jdbcType=DECIMAL},
      </if>
      <if test="marketUsdTotal != null">
        market_usd_total = #{marketUsdTotal,jdbcType=DECIMAL},
      </if>
      <if test="marketBtc != null">
        market_btc = #{marketBtc,jdbcType=DECIMAL},
      </if>
      <if test="marketEth != null">
        market_eth = #{marketEth,jdbcType=DECIMAL},
      </if>
      <if test="marketUsdt != null">
        market_usdt = #{marketUsdt,jdbcType=DECIMAL},
      </if>
      <if test="percentage != null">
        percentage = #{percentage,jdbcType=DOUBLE},
      </if>
      <if test="btcPrice != null">
        btc_price = #{btcPrice,jdbcType=DECIMAL},
      </if>
      <if test="ethPrice != null">
        eth_price = #{ethPrice,jdbcType=DECIMAL},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.blockchain.wallet.entity.ExchangeCurrency">
    update exchange_currency
    set exchange_usd_total = #{exchangeUsdTotal,jdbcType=DECIMAL},
      exchange_btc = #{exchangeBtc,jdbcType=DECIMAL},
      exchange_eth = #{exchangeEth,jdbcType=DECIMAL},
      exchange_usdt = #{exchangeUsdt,jdbcType=DECIMAL},
      market_usd_total = #{marketUsdTotal,jdbcType=DECIMAL},
      market_btc = #{marketBtc,jdbcType=DECIMAL},
      market_eth = #{marketEth,jdbcType=DECIMAL},
      market_usdt = #{marketUsdt,jdbcType=DECIMAL},
      percentage = #{percentage,jdbcType=DOUBLE},
      btc_price = #{btcPrice,jdbcType=DECIMAL},
      eth_price = #{ethPrice,jdbcType=DECIMAL},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>